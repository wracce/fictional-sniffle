import { Institution } from "@/models/institution";
import { error } from "console";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";

export type AlertType = {
  show: boolean;
  text: string;
  status: "info" | "success" | "error" | "warning";
};

export default function CrudPage() {
  const [institutions, setInstitutions] = useState([] as Institution[]);

  const [searchTerm, setSearchTerm] = useState("");

  const [alert, setAlert] = useState({
    show: false,
    text: "",
    status: "success",
  });

  const [formData, setFormData] = useState<Institution>({
    –Ω–∞–∑–≤–∞–Ω–∏–µ_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è: "",
    –∞–¥—Ä–µ—Å_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è: "",
    —Ñ–∏–æ_—Ä–µ–∫—Ç–æ—Ä–∞: "",
    –Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è: "",
  });

  // useEffect(() => {
  //   fetchInstitutions();
  // }, []);

  const fetchInstitutions = async () => {
    try {
      const response = await fetch("/api/vuz/read");
      const data = await response.json();
      setInstitutions(data);
    } catch (error) {
      console.error("Error fetching institutions:", error);
    }
  };

  const handleOpenCreate = async () => {
    setFormData({
      ...formData,
      –Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è: "",
    });

    document.getElementById("my_modal_1")!.showModal();
  };

  const searchInstitutions = async () => {
    try {
      const response = await fetch('/api/vuz/find', {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ —Ñ–∏–æ: searchTerm }),
      });
      const data = await response.json();
      setInstitutions(data);
    } catch (error) {
      console.error("Error searching institutions:", error);
    }
  };

  const handleDelete = async (–Ω–æ–º–µ—Ä?: string | null) => {
    try {
      await fetch("/api/vuz/delete", {
        method: "PUT",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ –Ω–æ–º–µ—Ä }),
      });
    } catch (error) {
      console.error("Error deleting institution:", error);
    }
  };

  const handleEdit = (institution: Institution) => {
    setFormData(institution);
    document.getElementById("my_modal_1")!.showModal();
  };

  const handleSubmit = async () => {
    try {
      let url = "/api/vuz/post";
      let method = "POST";
      if (formData.–Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è) {
        url = "/api/vuz/put";
        method = "PUT";
      }
      const response = await fetch(url, {
        method: method,
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        setAlert({
          show: true,
          status: "error",
          text: "–û–±—ä–µ–∫—Ç —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î",
        });
        setTimeout(() => {
          setAlert({ ...alert, show: false });
        }, 3000);
      }
    } catch (error) {
      console.error("Error submitting form:", error);
    }
  };

  return (
    <div>
      <div className="mb-4 flex items-center">
        <button className="btn btn-info mr-36" onClick={handleOpenCreate}>
          –°–æ–∑–¥–∞—Ç—å
        </button>
        <input
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–∫—Ç–æ—Ä–∞"
          className="input input-bordered mr-2"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <button className="btn btn-primary" onClick={searchInstitutions}>
          –ü–æ–∏—Å–∫
        </button>
      </div>

      {alert.show ? (
        <div
          id="alert"
          role="alert"
          className={`alert alert-${alert.status} bottom-2 right-2 fixed z-50 w-1/3`}
        >
          <span>{alert.text}.</span>
        </div>
      ) : (
        ""
      )}
      <table className="table">
        <thead>
          <tr>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
            <th>–ê–¥—Ä–µ—Å</th>
            <th>–§–ò–û –†–µ–∫—Ç–æ—Ä–∞</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {institutions.map((institution) => (
            <tr key={institution.–Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è}>
              <td>{institution.–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è}</td>
              <td>{institution.–∞–¥—Ä–µ—Å_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è}</td>
              <td>{institution.—Ñ–∏–æ_—Ä–µ–∫—Ç–æ—Ä–∞}</td>
              <td>
                <button
                  className="btn btn-circle btn-xs mr-2"
                  onClick={() => handleEdit(institution)}
                >
                  ü™õ
                </button>
                <button
                  className="btn btn-circle btn-xs"
                  onClick={() =>
                    handleDelete(
                      institution.–Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è
                    )
                  }
                >
                  ‚ùå
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <dialog id="my_modal_1" className="modal">
        <div className="modal-box">
          <h3 className="font-bold text-2xl">
            {formData.–Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è
              ? "–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï"
              : "–î–û–ë–ê–í–õ–ï–ù–ò–ï"}{" "}
            –£–ù–ò–í–ï–†–°–ò–¢–ï–¢–ê
          </h3>
          <div className="py-1 ">
            <label className="input input-bordered flex items-center my-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ:
              <input
                type="text"
                className="grow"
                placeholder="..."
                value={formData.–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è || ""}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    –Ω–∞–∑–≤–∞–Ω–∏–µ_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è: e.target.value,
                  })
                }
              />
            </label>
            <label className="input input-bordered flex items-center gap-2 my-2">
              –ê–¥—Ä–µ—Å:
              <input
                type="text"
                className="grow"
                placeholder="..."
                value={formData.–∞–¥—Ä–µ—Å_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è || ""}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    –∞–¥—Ä–µ—Å_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è: e.target.value,
                  })
                }
              />
            </label>
            <label className="input input-bordered flex items-center gap-2 my-2">
              –§–ò–û –†–µ–∫—Ç–æ—Ä–∞:
              <input
                type="text"
                className="grow"
                placeholder="..."
                value={formData.—Ñ–∏–æ_—Ä–µ–∫—Ç–æ—Ä–∞ || ""}
                onChange={(e) =>
                  setFormData({ ...formData, —Ñ–∏–æ_—Ä–µ–∫—Ç–æ—Ä–∞: e.target.value })
                }
              />
            </label>
            {/* {formData.–Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è && (
              <label className="input input-bordered flex items-center gap-2 my-2">
                –ù–æ–º–µ—Ä:
                <input
                  type="text"
                  className="grow"
                  placeholder="Daisy"
                  value={formData.–Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è}
                  onChange={(e) =>
                    setFormData({
                      ...formData,
                      –Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è: e.target.value,
                    })
                  }
                />
              </label>
            )} */}
          </div>
          <div className="modal-action">
            <form method="dialog">
              <button className="btn btn-primary" onClick={handleSubmit}>
                {formData.–Ω–æ–º–µ—Ä_–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ_—É—á–µ–±–Ω–æ–≥–æ_–∑–∞–≤–µ–¥–µ–Ω–∏—è
                  ? "–ò–∑–º–µ–Ω–∏—Ç—å"
                  : "–°–æ–∑–¥–∞—Ç—å"}
              </button>
              <button className="btn">–ó–∞–∫—Ä—ã—Ç—å</button>
            </form>
          </div>
        </div>
      </dialog>
    </div>
  );
}
